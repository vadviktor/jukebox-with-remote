// Generated by CoffeeScript 1.7.1
(function() {
  $(document).ready(function() {
    var Player, p;
    Player = (function() {
      function Player() {
        this.server = io.connect(window.server_url);
        this.player = $('#player')[0];
        this.currently_playing_id = 0;
        this.socket_events();
        this.jb_events();
        console.log('Loading first song into jukebox');
        this.player.src = window.music_files[this.currently_playing_id];
      }

      Player.prototype.setIntervalWithContext = function(code, delay, context) {
        return setInterval(function() {
          return code.call(context);
        }, delay);
      };

      Player.prototype.volume_up = function() {
        var new_vol;
        new_vol = ((this.player.volume * 100) + 5) / 100;
        this.player.volume = new_vol <= 1 ? new_vol : 1;
        return this.riport_current_volume(this.player.volume);
      };

      Player.prototype.volume_down = function() {
        var new_vol;
        new_vol = ((this.player.volume * 100) - 5) / 100;
        this.player.volume = new_vol >= 0 ? new_vol : 0;
        return this.riport_current_volume(this.player.volume);
      };

      Player.prototype.volume_mute = function() {
        this.volume_state = this.player.volume;
        this.player.volume = 0;
        return this.riport_current_volume(this.player.volume);
      };

      Player.prototype.volume_unmute = function() {
        this.player.volume = this.volume_state != null ? this.volume_state : this.volume_state = 0.1;
        return this.riport_current_volume(this.player.volume);
      };

      Player.prototype.riport_current_volume = function(vol) {
        return this.server.emit('player_riport_volume', {
          volume: (vol * 100).toFixed()
        });
      };

      Player.prototype.stop_playtime_riporter = function() {
        clearInterval(this.current_playtime_riporter);
        return this.current_playtime_riporter = null;
      };

      Player.prototype.start_playtime_riporter = function() {
        return this.current_playtime_riporter = this.setIntervalWithContext(function() {
          return this.server.emit('player_riport_playtime', {
            duration: this.player.duration,
            currentTime: this.player.currentTime
          });
        }, 1000, this);
      };

      Player.prototype.socket_events = function() {
        this.server.on('connect', (function(_this) {
          return function() {
            return _this.server.emit('iam', 'player');
          };
        })(this));
        this.server.on('full_status', (function(_this) {
          return function() {
            return _this.server.emit('player_full_status', {
              duration: _this.player.duration,
              currentTime: _this.player.currentTime,
              volume: (_this.player.volume * 100).toFixed(),
              is_paused: _this.player.paused,
              src: _this.player.src
            });
          };
        })(this));
        this.server.on('play', (function(_this) {
          return function() {
            console.log('PLAYER: I start playing');
            _this.player.play();
            return _this.start_playtime_riporter();
          };
        })(this));
        this.server.on('pause', (function(_this) {
          return function() {
            console.log('PLAYER: I pause playing');
            _this.player.pause();
            return _this.stop_playtime_riporter();
          };
        })(this));
        this.server.on('vol_up', (function(_this) {
          return function() {
            console.log('PLAYER: I increase volume');
            return _this.volume_up();
          };
        })(this));
        this.server.on('vol_down', (function(_this) {
          return function() {
            console.log('PLAYER: I decrease volume');
            return _this.volume_down();
          };
        })(this));
        this.server.on('mute', (function(_this) {
          return function() {
            console.log('PLAYER: I mute volume');
            return _this.volume_mute();
          };
        })(this));
        this.server.on('unmute', (function(_this) {
          return function() {
            console.log('PLAYER: I unmute volume');
            return _this.volume_unmute();
          };
        })(this));
        this.server.on('forward', (function(_this) {
          return function() {
            var is_paused;
            console.log('PLAYER: I select next file');
            is_paused = _this.player.paused;
            if (!is_paused) {
              _this.player.pause();
            }
            _this.stop_playtime_riporter();
            _this.player.src = window.music_files[Math.floor(Math.random() * window.music_files.length)];
            if (!is_paused) {
              _this.player.play();
            }
            return _this.start_playtime_riporter();
          };
        })(this));
        return this.server.on('backward', (function(_this) {
          return function() {
            var is_paused;
            console.log('PLAYER: I select previous file');
            is_paused = _this.player.paused;
            if (!is_paused) {
              _this.player.pause();
            }
            _this.stop_playtime_riporter();
            _this.player.src = window.music_files[Math.floor(Math.random() * window.music_files.length)];
            if (!is_paused) {
              _this.player.play();
            }
            return _this.start_playtime_riporter();
          };
        })(this));
      };

      Player.prototype.jb_events = function() {
        return $(this.player).on('ended', (function(_this) {
          return function(event) {
            _this.stop_playtime_riporter();
            _this.player.src = window.music_files[Math.floor(Math.random() * window.music_files.length)];
            _this.player.play();
            return _this.start_playtime_riporter();
          };
        })(this));
      };

      return Player;

    })();
    return p = new Player();
  });

}).call(this);

//# sourceMappingURL=player.map
