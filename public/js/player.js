// Generated by CoffeeScript 1.7.1
(function() {
  $(document).ready(function() {
    var Player, p;
    Player = (function() {
      function Player() {
        this.player = $('#player');
        this.server = io.connect(window.server_url);
        console.log('Loading first song into jukebox');
        $(this.player).attr('src', window.music_files[0]);
        this.socket_events();
        this.jb_events();
      }

      Player.prototype.setIntervalWithContext = function(code, delay, context) {
        return setInterval(function() {
          return code.call(context);
        }, delay);
      };

      Player.prototype.volume_up = function() {
        var new_vol;
        new_vol = ((this.player[0].volume * 100) + 5) / 100;
        this.player[0].volume = new_vol <= 1 ? new_vol : 1;
        return this.riport_current_volume(this.player[0].volume);
      };

      Player.prototype.volume_down = function() {
        var new_vol;
        new_vol = ((this.player[0].volume * 100) - 5) / 100;
        this.player[0].volume = new_vol >= 0 ? new_vol : 0;
        return this.riport_current_volume(this.player[0].volume);
      };

      Player.prototype.volume_mute = function() {
        this.volume_state = this.player[0].volume;
        this.player[0].volume = 0;
        return this.riport_current_volume(this.player[0].volume);
      };

      Player.prototype.volume_unmute = function() {
        this.player[0].volume = this.volume_state != null ? this.volume_state : this.volume_state = 0.1;
        return this.riport_current_volume(this.player[0].volume);
      };

      Player.prototype.riport_current_volume = function(vol) {
        return this.server.emit('player_riport_volume', {
          volume: (vol * 100).toFixed()
        });
      };

      Player.prototype.stop_playtime_riporter = function() {
        clearInterval(this.current_playtime_riporter);
        return this.current_playtime_riporter = null;
      };

      Player.prototype.socket_events = function() {
        this.server.on('connect', (function(_this) {
          return function() {
            return _this.server.emit('iam', 'player');
          };
        })(this));
        this.server.on('play', (function(_this) {
          return function() {
            console.log('PLAYER: I start playing');
            _this.player[0].play();
            return _this.current_playtime_riporter = _this.setIntervalWithContext(function() {
              return this.server.emit('player_riport_playtime', {
                duration: this.player[0].duration,
                currentTime: this.player[0].currentTime
              });
            }, 1000, _this);
          };
        })(this));
        this.server.on('pause', (function(_this) {
          return function() {
            console.log('PLAYER: I pause playing');
            _this.player[0].pause();
            return _this.stop_playtime_riporter();
          };
        })(this));
        this.server.on('vol_up', (function(_this) {
          return function() {
            console.log('PLAYER: I increase volume');
            return _this.volume_up();
          };
        })(this));
        this.server.on('vol_down', (function(_this) {
          return function() {
            console.log('PLAYER: I decrease volume');
            return _this.volume_down();
          };
        })(this));
        this.server.on('mute', (function(_this) {
          return function() {
            console.log('PLAYER: I mute volume');
            return _this.volume_mute();
          };
        })(this));
        return this.server.on('unmute', (function(_this) {
          return function() {
            console.log('PLAYER: I unmute volume');
            return _this.volume_unmute();
          };
        })(this));
      };

      Player.prototype.jb_events = function() {
        return this.player.on('ended', (function(_this) {
          return function(event) {
            return _this.stop_playtime_riporter();
          };
        })(this));
      };

      return Player;

    })();
    return p = new Player();
  });

}).call(this);

//# sourceMappingURL=player.map
