// Generated by CoffeeScript 1.7.1
(function() {
  var app, create_playlist, encoding, express, fs, io, r_readdir, server, settings;

  fs = require('fs');

  r_readdir = require('recursive-readdir-filter');

  express = require('express');

  app = express();

  server = require('http').createServer(app);

  io = require('socket.io').listen(server);

  settings = JSON.parse(fs.readFileSync('settings.json', encoding = "ascii"));

  app.set('view engine', 'ejs');

  app.locals.server_url = "http://" + settings.host_ip + ":" + settings.host_port;

  app.use(express["static"](__dirname + '/public'));

  app.get('/', function(req, res) {
    return res.redirect('/remote');
  });

  app.get('/player', function(req, res) {
    return res.render('player');
  });

  app.get('/remote', function(req, res) {
    return res.render('remote');
  });

  io.sockets.on('connection', function(socket) {
    console.log("socket.io connected");
    socket.on('disconnect', function() {
      return console.log("socket.id disconnected");
    });
    socket.on('remote_play', function() {
      console.log('REMOTE: I resume play');
      return socket.broadcast.emit('player_play');
    });
    socket.on('remote_pause', function() {
      console.log('REMOTE: I pause the play');
      return socket.broadcast.emit('player_pause');
    });
    socket.on('remote_mute', function() {
      return console.log('REMOTE: I mute the volume');
    });
    socket.on('remote_forward', function() {
      return console.log('REMOTE: I load next track');
    });
    socket.on('remote_backward', function() {
      return console.log('REMOTE: I load previous track');
    });
    socket.on('remote_vol_up', function() {
      return console.log('REMOTE: I increase volume');
    });
    return socket.on('remote_vol_down', function() {
      return console.log('REMOTE: I decrease volume');
    });
  });

  create_playlist = function() {
    var options;
    console.log("Playlist being created.");
    options = {
      filterDir: function(stats) {
        return stats.name.substr(0, 1) !== '.';
      },
      filterFile: function(stats) {
        return stats.name.substr(0, 1) !== '.' && stats.name.match(/\.(mp3|webm|ogg|aac|opus|mp4|wav)$/);
      }
    };
    return r_readdir(settings.music_dir, options, function(err, files) {
      var f, filtered_files, _fn, _i, _len;
      filtered_files = [];
      _fn = function(f) {
        var relative_url;
        relative_url = "music/" + (f.substr(settings.music_dir.length + 1));
        return filtered_files.push(encodeURIComponent(relative_url));
      };
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        f = files[_i];
        _fn(f);
      }
      app.locals.music_files = filtered_files;
      return console.log("Playlist now has " + filtered_files.length + " items.");
    });
  };

  server.listen(settings.host_port, function() {
    console.log("Listening on port " + (server.address().port));
    create_playlist();
    return true;
  });

}).call(this);

//# sourceMappingURL=app.map
