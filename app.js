// Generated by CoffeeScript 1.7.1
(function() {
  var app, create_playlist, express, fs, io, music_dir, r_readdir, server;

  fs = require('fs');

  r_readdir = require('recursive-readdir');

  express = require('express');

  app = express();

  server = require('http').createServer(app);

  io = require('socket.io').listen(server);

  music_dir = './public/music';

  app.locals.server_url = 'http://localhost:3000';

  app.set('view engine', 'ejs');

  app.use(express["static"](__dirname + '/public'));

  app.get('/', function(req, res) {
    return res.redirect('/remote');
  });

  app.get('/player', function(req, res) {
    return res.render('player');
  });

  app.get('/remote', function(req, res) {
    return res.render('remote');
  });

  io.sockets.on('connection', function(jb) {
    console.log("socket.io connected");
    jb.on('disconnect', function() {
      return console.log("socket.id disconnected");
    });
    jb.on('remote_play', function() {
      return console.log('REMOTE: I resume play');
    });
    jb.on('remote_pause', function() {
      return console.log('REMOTE: I pause the play');
    });
    jb.on('remote_mute', function() {
      return console.log('REMOTE: I mute the volume');
    });
    jb.on('remote_forward', function() {
      return console.log('REMOTE: I load next track');
    });
    jb.on('remote_backward', function() {
      return console.log('REMOTE: I load previous track');
    });
    jb.on('remote_vol_up', function() {
      return console.log('REMOTE: I increase volume');
    });
    return jb.on('remote_vol_down', function() {
      return console.log('REMOTE: I decrease volume');
    });
  });

  create_playlist = function() {
    console.log("Playlist being created.");
    return r_readdir(music_dir, function(err, files) {
      var f, filtered_files, _i, _len;
      filtered_files = [];
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        f = files[_i];
        if (f.substr(-5) !== '.flac') {
          filtered_files.push(encodeURIComponent('http://localhot:8080/' + f.substr(music_dir.length)));
        }
      }
      app.locals.music_files = filtered_files;
      return console.log("Playlist now has " + filtered_files.length + " items.");
    });
  };

  server.listen(3000, function() {
    console.log("Listening on port " + (server.address().port));
    create_playlist();
    return true;
  });

}).call(this);

//# sourceMappingURL=app.map
